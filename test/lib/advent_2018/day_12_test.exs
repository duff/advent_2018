defmodule Advent2018.Day12Test do
  use ExUnit.Case, async: true

  alias Advent2018.Day12

  test "generate" do
    input = """
    ...## => #
    ..#.. => #
    .#... => #
    .#.#. => #
    .#.## => #
    .##.. => #
    .#### => #
    #.#.# => #
    #.### => #
    ##.#. => #
    ##.## => #
    ###.. => #
    ###.# => #
    ####. => #
    """

    assert generate("#..#.#..##......###...###", 1, input) == "#...#....#.....#..#..#..#"
    assert generate("#..#.#..##......###...###", 2, input) == "##..##...##....#..#..#..##"
    assert generate("#..#.#..##......###...###", 3, input) == "#.#...#..#.#....#..#..#...#"
    assert generate("#..#.#..##......###...###", 5, input) == "#...##...#.#..#..#...#...#"
    assert generate("#..#.#..##......###...###", 20, input) == "#....##....#####...#######....#.#..##"
  end

  def generate(pots, generation_count, input) do
    {pots, _} = Day12.generate(pots, generation_count, input)

    Enum.join(pots, "")
    |> String.trim_trailing(".")
    |> String.trim_leading(".")
  end

  test "part_a" do
    input = """
    ...## => #
    ..#.. => #
    .#... => #
    .#.#. => #
    .#.## => #
    .##.. => #
    .#### => #
    #.#.# => #
    #.### => #
    ##.#. => #
    ##.## => #
    ###.. => #
    ###.# => #
    ####. => #
    """

    assert Day12.part_a("#..#.#..##......###...###", 20, input) == 325
  end

  @tag :real
  test "part_a real" do
    pots = "###.#..#..##.##.###.#.....#.#.###.#.####....#.##..#.#.#..#....##..#.##...#.###.#.#..#..####.#.##.#"

    input = """
    #.... => .
    #.##. => #
    ..#.. => .
    #.#.# => .
    .#.## => #
    ...## => #
    ##... => #
    ###.. => #
    #..## => .
    .###. => .
    ###.# => #
    ..... => .
    #..#. => .
    .#.#. => #
    ##..# => #
    .##.. => .
    ...#. => .
    #.### => .
    ..### => .
    ####. => .
    #.#.. => #
    .##.# => #
    .#... => #
    ##.#. => #
    ....# => .
    ..#.# => #
    #...# => #
    ..##. => .
    .#..# => #
    .#### => .
    ##### => #
    ##.## => #
    """

    assert Day12.part_a(pots, 20, input) == 0
  end
end
